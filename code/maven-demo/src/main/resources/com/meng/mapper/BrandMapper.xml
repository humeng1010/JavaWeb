<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:名称空间
-->
<mapper namespace="com.meng.mapper.BrandMapper">
    <!--    id：唯一标识
            resultType:返回结果的类型（将来数据返回的是什么类型就写什么类型）
    -->
    <!--    我们发现数据库列名和实体类的名称有的不一样，显示数据为null-->
    <!--    解决方案一：起别名（每次查询都要定义一次别名，不方便）-->
    <!--    <select id="getAll" resultType="brand">-->
    <!--        select id, brand_name as brandName, company_name as companyName, ordered, description, status-->
    <!--        from tb_brand;-->
    <!--    </select>-->
    <!--    解决方案二：sql片段（不灵活）-->
    <!--    <sql id="brand_column">-->
    <!--        id, brand_name as brandName, company_name as companyName, ordered, description, status-->
    <!--    </sql>-->
    <!--    <select id="getAll" resultType="brand">-->
    <!--        select-->
    <!--        <include refid="brand_column"></include>-->
    <!--        from tb_brand;-->
    <!--    </select>-->
    <!--解决方案三：resultMap-->
    <!--    id:唯一标识
            type：映射的文件类型（该实体类），支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
                id:完成主键字段的映射
                result：完成一般字段的映射
                column:表的列名
                property:实体类的属性名
        -->
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"></result>
    </resultMap>

    <select id="getAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>
    <!--    参数占位符：
            1. #{}  :select * from tb_brand where id = ?;（会将其参数替换为？，为了防止SQL注入）
            2. ${}  :select * from tb_brand where id = 1;（拼SQL，存在SQL注入问题）不要使用！！
            3. 使用时机：
                参数传递的时候使用: #{}

            特殊字符处理（例如小于号<)
            1. 转义字符 : &lt;(字符少的时候)
            2. CDATA区 :<![CDATA[  <  ]]>  (字符多的时候)
    -->
    <select id="getById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>
    <!--    <select id="selectByCondition" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand-->
    <!--        where status = #{status}-->
    <!--          and company_name like #{companyName}-->
    <!--          and brand_name like #{brandName};-->
    <!--    </select>-->

    <!--    问题 where后可能直接连接了and 造成SQL语法错误-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName !='' ">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != '' ">
                and brand_name like #{brandName};
            </if>
        </where>
    </select>
    <!--    <select id="selectByConditionSingle" resultMap="brandResultMap">-->
    <!--        select *-->
    <!--        from tb_brand-->
    <!--        where-->
    <!--        <choose>-->
    <!--            <when test="status != null">-->
    <!--                status = #{status}-->
    <!--            </when>-->
    <!--            <when test="companyName != null and companyName != '' ">-->
    <!--                company_name like #{companyName}-->
    <!--            </when>-->
    <!--            <when test="brandName != null and brandName != ''">-->
    <!--                brand_name like #{brandName};-->
    <!--            </when>-->
    <!--            <otherwise>-->
    <!--                1=1-->
    <!--            </otherwise>-->
    <!--        </choose>-->
    <!--    </select>-->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != '' ">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName};
                </when>
            </choose>
        </where>
    </select>

    <!--    添加-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <!--    修改全部字段-->
    <!--    <update id="update">-->
    <!--        update tb_brand-->
    <!--        set status       = #{status},-->
    <!--            company_name = #{companyName},-->
    <!--            brand_name   = #{brandName},-->
    <!--            description  = #{description},-->
    <!--            ordered      = #{ordered}-->
    <!--        where id = #{id};-->
    <!--    </update>-->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != '' ">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != '' ">
                company_name = #{companyName},
            </if>
            <if test="description != null and description != '' ">
                description = #{description},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="status != null ">
                status = #{status},
            </if>
        </set>
        where id = #{id};
    </update>
    <!--    删除-->
    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id};
    </delete>
    <!--    批量删除-->
    <!--    mybatis会将数组封装成一个map集合
            * 默认 ： array = 数组
            * 使用 @Param注解改变map集合的默认key的名称

            foreach标签中的属性
            * collection ： 集合的名字（map集合）
            * item ：使用foreach遍历后得到的每一个元素
            * separator ： 每一个元素之间的分割符" , "
            * open : 开头的符号 " ( "
            * close : 结束的符号 " ) "
    -->
    <delete id="deleteByIds">
        delete
        from tb_brand
        where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

</mapper>